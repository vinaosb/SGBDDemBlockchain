//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v1.3.0.6
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace SharedLibrary
{
   /// <inheritdoc/>
   public partial class EFModel1 : Microsoft.EntityFrameworkCore.DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::SharedLibrary.Enderecos> Enderecos { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::SharedLibrary.Escola> Escola { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::SharedLibrary.Estado> Estado { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::SharedLibrary.Municipio> Municipio { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::SharedLibrary.Regiao> Regiao { get; set; }
      #endregion DbSets

      /// <inheritdoc />
      public EFModel1(DbContextOptions<EFModel1> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .ToTable("Enderecos")
                     .HasKey(t => t.Cod_Endereco);
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .Property(t => t.Cod_Endereco)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .Property(t => t.Cod_Municipio)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .Property(t => t.CEP)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .Property(t => t.Nome_Distrito)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .Property(t => t.Endereco)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .Property(t => t.Numero)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .Property(t => t.Complemento)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .Property(t => t.Bairro)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .HasOne(x => x.Escola)
                     .WithOne(x => x.Endereco)
                     .HasForeignKey<global::SharedLibrary.Escola>("Cod_Entidade")
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Enderecos>()
                     .HasOne(x => x.Municipio)
                     .WithMany(x => x.Endereco)
                     .HasForeignKey("Cod_Municipio");

         modelBuilder.Entity<global::SharedLibrary.Escola>()
                     .ToTable("Escola")
                     .HasKey(t => t.Cod_Entidade);
         modelBuilder.Entity<global::SharedLibrary.Escola>()
                     .Property(t => t.Cod_Entidade)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::SharedLibrary.Escola>()
                     .Property(t => t.Cod_Endereco)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Escola>()
                     .Property(t => t.Localizacao)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Escola>()
                     .Property(t => t.Nome)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Escola>()
                     .Property(t => t.Categoria)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Escola>()
                     .Property(t => t.ID_Latitude)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Escola>()
                     .Property(t => t.ID_Longitude)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Escola>()
                     .Property(t => t.Instituicao_Sem_Fim_Lucrativo)
                     .IsRequired();

         modelBuilder.Entity<global::SharedLibrary.Estado>()
                     .ToTable("Estado")
                     .HasKey(t => t.Cod_Estado);
         modelBuilder.Entity<global::SharedLibrary.Estado>()
                     .Property(t => t.Cod_Estado)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::SharedLibrary.Estado>()
                     .Property(t => t.Cod_Regiao)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Estado>()
                     .Property(t => t.Nome_Estado)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Estado>()
                     .Property(t => t.UF)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Estado>()
                     .HasOne(x => x.Regiao)
                     .WithMany(x => x.Estado)
                     .HasForeignKey("Cod_Regiao");

         modelBuilder.Entity<global::SharedLibrary.Municipio>()
                     .ToTable("Municipio")
                     .HasKey(t => t.Cod_Municipio);
         modelBuilder.Entity<global::SharedLibrary.Municipio>()
                     .Property(t => t.Cod_Municipio)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::SharedLibrary.Municipio>()
                     .Property(t => t.PK_COD_MUNICIPIO_OLD)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Municipio>()
                     .Property(t => t.Nome_Municipio)
                     .IsRequired();
         modelBuilder.Entity<global::SharedLibrary.Municipio>()
                     .HasOne(x => x.Estado)
                     .WithMany(x => x.Municipio)
                     .HasForeignKey("Cod_Estado");

         modelBuilder.Entity<global::SharedLibrary.Regiao>()
                     .ToTable("Regiao")
                     .HasKey(t => t.Cod_Regiao);
         modelBuilder.Entity<global::SharedLibrary.Regiao>()
                     .Property(t => t.Cod_Regiao)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::SharedLibrary.Regiao>()
                     .Property(t => t.Nome_Regiao)
                     .IsRequired();

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
